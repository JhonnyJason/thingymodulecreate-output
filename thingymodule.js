// Generated by CoffeeScript 2.5.1
(function() {
  var CLI, Spinner, addDeveloperProperty, addOwnRemoteURLProperty, addProperty, addPushThingy, addRelatedRemotesProperty, addStaticProperties, addThingyNameProperty, addThingyTypeProperty, addVirtualProperties, c, cloud, constructor, createRepositoryForThingy, fs, git, globalScope, log, olog, ostr, pathHandler, print, printError, printSuccess, recipe, remoteHandler, retrieveDeveloperProperty, retrieveOwnRemoteURLProperty, retrieveRelatedRemotesProperty, retrieveRemote, saveThingyFile, saveThingyStateToThingy, thingymodule, user;

  thingymodule = {
    name: "thingymodule"
  };

  //region modulesFromEnvironment
  //region node_modules
  CLI = require('clui');

  Spinner = CLI.Spinner;

  c = require("chalk");

  fs = require("fs-extra");

  //endregion

  //region localModules
  git = null;

  user = null;

  cloud = null;

  recipe = null;

  globalScope = null;

  pathHandler = null;

  constructor = null;

  remoteHandler = null;

  //endregion
  //endregion

  //region logPrintFunctions
  //#############################################################################
  log = function(arg) {
    if (allModules.debugmodule.modulesToDebug["thingymodule"] != null) {
      console.log("[thingymodule]: " + arg);
    }
  };

  print = function(arg) {
    return console.log(arg);
  };

  printSuccess = function(arg) {
    return print(c.green(arg));
  };

  printError = function(arg) {
    return pring(c.red(arg));
  };

  olog = function(o) {
    return log("\n" + ostr(o));
  };

  ostr = function(o) {
    return JSON.stringify(o, null, 4);
  };

  //endregion
  //#############################################################################
  thingymodule.initialize = function() {
    log("thingymodule.initialize");
    git = allModules.gitmodule;
    pathHandler = allModules.pathhandlermodule;
    cloud = allModules.cloudservicemodule;
    user = allModules.userinquirermodule;
    recipe = allModules.recipemodule;
    globalScope = allModules.globalscopemodule;
    constructor = allModules.constructionmodule;
    remoteHandler = allModules.remotehandlermodule;
  };

  //region internalFunctions
  addPushThingy = async function(path, remote) {
    var err, status, statusMessage;
    statusMessage = "initialize and push " + remote.getRepo() + "...";
    status = new Spinner(statusMessage);
    status.start();
    try {
      await git.addPush(path, remote);
    } catch (error) {
      err = error;
      log(err);
    } finally {
      status.stop();
    }
  };

  saveThingyStateToThingy = async function(thingyPath, thingy) {
    log("saveThingyStateToThingy");
    await addStaticProperties(thingy, thingyPath);
    await saveThingyFile(thingy, thingyPath);
  };

  saveThingyFile = function(thingy, thingyPath) {
    log("saveThingyFile");
  };

  //# TODO maybe create and use this file later
  // fileString = ostr(thingy)
  // filePath = pathHandler.resolve(thingyPath, ".thingy")
  // await fs.writeFile(filePath, fileString)
  createRepositoryForThingy = async function(thingy) {
    var message, thingyPath, visible;
    log("createRepositoryForThingy");
    message = "Make thingy " + thingy.name + " public?";
    visible = (await user.inquireYesNoDecision(message, true));
    await cloud.createRepository(thingy.name, visible);
    thingyPath = pathHandler.resolve(thingy.basePath, thingy.name);
    await fs.mkdir(thingyPath);
  };

  //region manageThingyProperties
  addStaticProperties = function(thingy, basePath) {
    var list, map;
    log("addStaticProperties");
    map = {};
    list = [];
    //# TODO add all the properties
    thingy.staticMap = map;
    return thingy.staticProperties = list;
  };

  addVirtualProperties = async function(thingy) {
    var list, map;
    log("addVirtualProperties");
    map = {};
    list = [];
    await addThingyTypeProperty(thingy.type, list, map);
    await addThingyNameProperty(thingy.name, list, map);
    await addDeveloperProperty(list, map);
    await addOwnRemoteURLProperty(list, map);
    await addRelatedRemotesProperty(list, map);
    thingy.virtualMap = map;
    return thingy.virtualProperties = list;
  };

  //region virtualProperties
  addThingyTypeProperty = function(type, list, map) {
    var property;
    property = {
      thingyType: type
    };
    return addProperty(property, list, map);
  };

  addThingyNameProperty = function(name, list, map) {
    var property;
    property = {
      thingyName: name
    };
    return addProperty(property, list, map);
  };

  addDeveloperProperty = async function(list, map) {
    var developer, property;
    developer = (await retrieveDeveloperProperty());
    property = {developer};
    return addProperty(property, list, map);
  };

  addOwnRemoteURLProperty = async function(list, map) {
    var property, url;
    url = (await retrieveOwnRemoteURLProperty());
    property = {
      ownRemoteURL: url
    };
    return addProperty(property, list, map);
  };

  addRelatedRemotesProperty = async function(list, map) {
    var property, remotes;
    remotes = (await retrieveRelatedRemotesProperty());
    property = {
      relatedRemotes: remotes
    };
    return addProperty(property, list, map);
  };

  //endregion
  addProperty = function(property, list, map) {
    Object.assign(map, property);
    return list.push(property);
  };

  //region retrievalFunctions
  retrieveRemote = function(options) {
    if (wildcardIsOnlyOption(options)) {
      return ""; // await user.retrieveRemote("", message)
    }
    return ""; // await user.retrieveRemote(options[0], message)
  };

  retrieveDeveloperProperty = function() {
    return "Deplemento"; //#TODO implement
  };

  retrieveOwnRemoteURLProperty = function() {
    return ""; //#TODO implement
  };

  retrieveRelatedRemotesProperty = async function() {
    var relatedRemote;
    relatedRemote = {
      relation: "origin",
      remoteURL: (await retrieveOwnRemoteURLProperty())
    };
    return [relatedRemote];
  };

  //endregion
  //endregion
  //endregion

  //region exposedFunctions
  thingymodule.checkThingyName = async function(name) {
    var exists, isInScope, message;
    log("thingymodule.checkThingyName");
    if (!name) {
      name = (await user.inquireString("thingyName: ", ""));
    }
    exists = (await pathHandler.somethingExistsAtBase(name));
    isInScope = globalScope.repoIsInScope(name);
    
    //# does exist ->
    //#   # and has no content -> remove dir -> does not exist
    if (exists) {
      //# TODO implement desired behaviour
      message = "That thingy(" + name + ") already exists in your localScope!";
      message += "\nYou might just want to use that :-)";
      message += "\nOr consider a new name.";
      throw message;
    }
    if (!exists && !isInScope) {
      return name;
    }
    if (!exists && isInScope) {
      //# TODO implement desired behaviour
      message = "That thingy(" + name + ") already exists in your globalScope!";
      message += "\nYou might just want to just clone that :-)";
      message += "\nOr consider a new name.";
      throw message;
    }
    
    //# does exist ->        
    //#   # and has .thingy.json -> done!
    //# does exist ->
    //#   # and is git repo -> generate .thingy.json -> done!
    //# does exist ->
    //#   # and has other content -> create typeless thingy and merge: ["./"]
    throw new Error("Unhandled case in thingymodule.checkThingyName!");
  };

  thingymodule.createVersionless = async function(name, type, constructionPlan, basePath) {
    var thingy;
    log("thingymodule.createVersionless");
    thingy = {name, type, constructionPlan, basePath};
    await addVirtualProperties(thingy);
    await constructor.constructVersionless(thingy);
    await recipe.executeIndividualize(type, basePath);
  };

  thingymodule.create = async function(name, type, constructionPlan, basePath) {
    var remote, thingy, thingyPath;
    log("thingymodule.create");
    thingy = {name, type, constructionPlan, basePath};
    await addVirtualProperties(thingy);
    await createRepositoryForThingy(thingy);
    thingyPath = pathHandler.resolve(thingy.basePath, thingy.name);
    remote = remoteHandler.getRemoteObject(thingy.name);
    await git.init(thingyPath, remote);
    await constructor.construct(thingy);
    await recipe.executeIndividualize(type, thingyPath);
    await saveThingyStateToThingy(thingyPath, thingy);
    await addPushThingy(thingyPath, remote);
  };

  //endregion
  module.exports = thingymodule;

}).call(this);
