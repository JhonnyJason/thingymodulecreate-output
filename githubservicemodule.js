// Generated by CoffeeScript 2.5.1
(function() {
  var OctokitREST, baseUrl, c, checkAccess, createRepository, deleteRepository, getOctokit, githubservicemodule, globalScope, log, olog, ostr, printError, printSuccess, retrieveAllRepositories, userAgent;

  githubservicemodule = {
    name: "githubservicemodule"
  };

  //region node_modules
  OctokitREST = require("@octokit/rest");

  c = require('chalk');

  //endregion

  //region internalProperties
  baseUrl = "https://api.github.com";

  userAgent = "thingycreate v0.3.0";

  globalScope = null;

  //endregion

  //region essentialFunctions
  //#############################################################################
  //region logFunctions
  log = function(arg) {
    if (allModules.debugmodule.modulesToDebug["githubservicemodule"] != null) {
      console.log("[githubservicemodule]: " + arg);
    }
  };

  ostr = function(o) {
    return JSON.stringify(o, null, 4);
  };

  olog = function(o) {
    return log("\n" + ostr(o));
  };

  printError = function(msg) {
    return console.log(c.red("\n" + msg));
  };

  printSuccess = function(msg) {
    return console.log(c.green("\n" + msg));
  };

  //endregion
  //#############################################################################
  githubservicemodule.initialize = function() {
    log("githubservicemodule.initialize");
    globalScope = allModules.globalscopemodule;
  };

  //endregion

  //region internalFunctions
  getOctokit = function(token) {
    var options;
    log("getOctokit");
    options = {
      auth: token,
      userAgent: userAgent,
      baseUrl: baseUrl
    };
    return new OctokitREST(options);
  };

  checkAccess = async function(token) {
    var err, info, octokit;
    log("checkAccess");
    octokit = getOctokit(token);
    try {
      info = (await octokit.users.getAuthenticated());
      return true;
    } catch (error) {
      err = error;
      return false;
    }
  };

  retrieveAllRepositories = async function(service) {
    var answer, data, keys, names, octokit, options, repo, results;
    log("retrieveAllRepositories");
    octokit = getOctokit(service.accessToken);
    options = {
      visibility: "all",
      affiliation: "owner",
      sort: "updated",
      per_page: 100,
      direction: "asc",
      page: 0
    };
    results = [];
    while (true) {
      answer = (await octokit.repos.list(options));
      //else return resultskeys = Object.keys(answer)
      keys = Object.keys(answer);
      data = answer.data;
      names = (function() {
        var i, len, results1;
        results1 = [];
        for (i = 0, len = data.length; i < len; i++) {
          repo = data[i];
          results1.push(repo.name);
        }
        return results1;
      })();
      options.page++;
      if (names.length) {
        results = results.concat(names);
      } else {
        return results;
      }
    }
  };

  createRepository = async function(service, repo, visible) {
    var octokit, options;
    log("createRepository");
    octokit = getOctokit(service.accessToken);
    options = {
      name: repo,
      private: !visible
    };
    await octokit.repos.createForAuthenticatedUser(options);
  };

  deleteRepository = async function(service, repo) {
    var octokit, options;
    log("deleteRepository");
    octokit = getOctokit(service.accessToken);
    options = {
      repo: repo,
      owner: service.username
    };
    await octokit.repos.delete(options);
  };

  
  //endregion

  //region exposedFunctions
  githubservicemodule.check = async function(service) {
    var scope;
    log("githubservicemodule.check");
    service.isAccessible = (await checkAccess(service.accessToken));
    service.hostURL = baseUrl;
    if (service.isAccessible) {
      scope = (await retrieveAllRepositories(service));
      globalScope.addServiceScope(scope, service);
    }
  };

  githubservicemodule.deleteRepository = async function(service, repo) {
    await deleteRepository(service, repo);
  };

  githubservicemodule.createRepository = async function(service, repo, visible) {
    await createRepository(service, repo, visible);
  };

  githubservicemodule.getSSHURLBase = function(service) {
    log("githubservicemodule.getSSHURLBase");
    return "git@github.com:" + service.username;
  };

  githubservicemodule.getHTTPSURLBase = function(service) {
    log("githubservicemodule.getHTTPSURLBase");
    return "https://github.com/" + service.username;
  };

  //endregion
  module.exports = githubservicemodule;

}).call(this);
