// Generated by CoffeeScript 2.5.1
(function() {
  var addSeparators, appendSkip, choicePrompt, cloud, cloudServicePrompt, cloudServiceTypePrompt, existingRemotePrompt, getSkipChoice, inquirer, log, multipleSelectionPrompt, nextActionPrompt, olog, ostr, passwordPrompt, printError, printSuccess, recipe, remoteHandler, selectPrompt, stringPrompt, thingyModuleTypePrompt, thingyRecipePrompt, userConfig, userinquirermodule, yesNoPrompt;

  userinquirermodule = {
    name: "userinquirermodule"
  };

  //region modulesFromEnvironment
  //region node_modules
  inquirer = require("inquirer");

  //endregion

  //region localModules
  cloud = null;

  recipe = null;

  userConfig = null;

  remoteHandler = null;

  //endregion
  //endregion

  //region logPrintFunctions
  //#############################################################################
  log = function(arg) {
    if (allModules.debugmodule.modulesToDebug["userinquirermodule"] != null) {
      console.log("[userinquirermodule]: " + arg);
    }
  };

  olog = function(o) {
    return log("\n" + ostr(o));
  };

  ostr = function(o) {
    return JSON.stringify(o, null, 4);
  };

  printSuccess = function(arg) {
    return console.log(c.green(arg));
  };

  printError = function(arg) {
    return console.log(c.red(arg));
  };

  //endregion
  //#############################################################################
  userinquirermodule.initialize = function() {
    log("userinquirermodule.initialize");
    cloud = allModules.cloudservicemodule;
    recipe = allModules.recipemodule;
    userConfig = allModules.userconfigmodule;
    remoteHandler = allModules.remotehandlermodule;
  };

  //region internalFunctions
  //region utilFunctions
  addSeparators = function(element) {
    if (element === "separator") {
      return new inquirer.Separator();
    }
    return element;
  };

  getSkipChoice = function() {
    var skipChoice;
    return skipChoice = {
      name: "skip",
      value: -1
    };
  };

  appendSkip = function(typeChoices) {
    typeChoices.push(getSkipChoice());
    return typeChoices;
  };

  //endregion

  //region promtpFunctions
  yesNoPrompt = function(message, defaultValue) {
    return [
      {
        name: "yes",
        type: "confirm",
        message: message,
        default: defaultValue
      }
    ];
  };

  nextActionPrompt = function(actionChoices) {
    actionChoices = actionChoices.map(addSeparators);
    actionChoices.unshift(new inquirer.Separator());
    return [
      {
        name: "nextAction",
        type: "list",
        message: "Select a userConfigAction >",
        choices: actionChoices,
        default: actionChoices[0]
      }
    ];
  };

  selectPrompt = function(options) {
    return [
      {
        name: "selection",
        type: "list",
        message: "Select an option >",
        choices: options,
        default: options[0]
      }
    ];
  };

  choicePrompt = function(choices, message) {
    return [
      {
        name: "choice",
        type: "list",
        message: message,
        choices: choices,
        default: choices[0]
      }
    ];
  };

  cloudServiceTypePrompt = function() {
    var typeChoices;
    typeChoices = appendSkip([...cloud.allServiceTypes]);
    return [
      {
        name: "cloudServiceType",
        type: "list",
        message: "Select a cloudServiceType >",
        choices: typeChoices,
        default: typeChoices[0]
      }
    ];
  };

  thingyRecipePrompt = function() {
    var recipeChoices;
    recipeChoices = appendSkip(recipe.getAllRecipeChoices());
    return [
      {
        name: "selectedThingyRecipe",
        type: "list",
        message: "Select a thingyRecipe >",
        choices: recipeChoices,
        default: recipeChoices[0]
      }
    ];
  };

  cloudServicePrompt = function() {
    var serviceChoices;
    serviceChoices = appendSkip(cloud.getAllServiceChoices());
    return [
      {
        name: "selectedCloudService",
        type: "list",
        message: "Select a cloudService >",
        choices: serviceChoices,
        default: serviceChoices[0]
      }
    ];
  };

  multipleSelectionPrompt = function(choices) {
    return [
      {
        name: "selection",
        type: "checkbox",
        message: "Select your Selection >",
        choices: choices
      }
    ];
  };

  stringPrompt = function(stringLabel, current) {
    return [
      {
        name: "userString",
        type: "input",
        message: stringLabel,
        default: current
      }
    ];
  };

  passwordPrompt = function(message) {
    return [
      {
        name: "password",
        type: "password",
        message: message
      }
    ];
  };

  existingRemotePrompt = function(message, defaultValue) {
    return [
      {
        name: "remote",
        type: "input",
        message: message,
        default: defaultValue,
        validate: function(value) {
          log("validating value: " + value);
          if (value.length) {
            return remoteHandler.checkIfRemoteIsAvailable(value);
          } else {
            return 'Please!';
          }
        }
      }
    ];
  };

  thingyModuleTypePrompt = function(message, defaultValue) {
    return [
      {
        name: "thingyModule",
        type: "input",
        message: message,
        default: defaultValue,
        validate: function(value) {
          if (value.length) {
            return recipe.checkIfRecipeExistsForModule(value);
          } else {
            return 'Please!';
          }
        }
      }
    ];
  };

  //endregion
  //endregion

  //region exposedFunctions
  userinquirermodule.inquireYesNoDecision = async function(message, defaultValue) {
    var answer, prompt;
    log("userinquirermodule.inquireYesNoDecision");
    prompt = yesNoPrompt(message, defaultValue);
    answer = (await inquirer.prompt(prompt));
    return answer.yes;
  };

  userinquirermodule.inquireThingyModuleType = async function(message, defaultValue) {
    var answer, prompt;
    log("userinquirermodule.inquireThingyModuleType");
    prompt = thingyModuleTypePrompt(message, defaultValue);
    answer = (await inquirer.prompt(prompt));
    return answer.thingyModule;
  };

  userinquirermodule.inquireExistingRemote = async function(message, defaultValue) {
    var answer, prompt;
    log("userinquirermodule.inquireExistingRemote");
    prompt = existingRemotePrompt(message, defaultValue);
    answer = (await inquirer.prompt(prompt));
    return answer.remote;
  };

  userinquirermodule.inquireUserDecision = async function(choices, message) {
    var answer, prompt;
    log("userinquirermodule.inquireUserDecision");
    prompt = choicePrompt(choices, message);
    answer = (await inquirer.prompt(prompt));
    return answer.choice;
  };

  userinquirermodule.inquireSelectFrom = async function(options) {
    var answer, question;
    log("userinquirermodule.inquireSelectFrom");
    question = selectPrompt(options);
    answer = (await inquirer.prompt(question));
    return answer.selection;
  };

  userinquirermodule.inquireNextAction = async function(actions) {
    var answer, prompt;
    log("userinquirermodule.inquireNextAction");
    prompt = nextActionPrompt(actions);
    answer = (await inquirer.prompt(prompt));
    return answer.nextAction;
  };

  userinquirermodule.inquireCloudServiceType = async function() {
    var answer, prompt;
    log("userinquirermodule.inquireCloudServiceType");
    prompt = cloudServiceTypePrompt();
    answer = (await inquirer.prompt(prompt));
    return answer.cloudServiceType;
  };

  userinquirermodule.inquireCloudServiceSelect = async function() {
    var answer, prompt;
    log("userinquirermodule.inquireCloudServiceSelect");
    prompt = cloudServicePrompt();
    answer = (await inquirer.prompt(prompt));
    return answer.selectedCloudService;
  };

  userinquirermodule.inquireThingyRecipeSelect = async function() {
    var answer, prompt;
    log("userinquirermodule.inquireThingyRecipeSelect");
    prompt = thingyRecipePrompt();
    answer = (await inquirer.prompt(prompt));
    return answer.selectedThingyRecipe;
  };

  userinquirermodule.inquireSelectionSet = async function(choices) {
    var answer, prompt;
    log("userinquirermodule.inquireSelectionSet");
    prompt = multipleSelectionPrompt(choices);
    answer = (await inquirer.prompt(prompt));
    return answer.selection;
  };

  userinquirermodule.inquireString = async function(stringLabel, current) {
    var answer, prompt;
    log("userinquirermodule.inquireUserString");
    prompt = stringPrompt(stringLabel, current);
    answer = (await inquirer.prompt(prompt));
    return answer.userString;
  };

  userinquirermodule.inquirePassword = async function(message) {
    var answer, prompt;
    log("userinquirermodule.inquirePassword");
    prompt = passwordPrompt(message);
    answer = (await inquirer.prompt(prompt));
    return answer.password;
  };

  //endregion
  module.exports = userinquirermodule;

}).call(this);
