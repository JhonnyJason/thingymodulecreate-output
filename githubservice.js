// Generated by CoffeeScript 2.5.1
(function() {
  var Octokit, addDeployKey, addWebhook, baseUrl, c, cfg, checkAccess, createRepository, deleteRepository, getDeployKeyId, getOctokit, getWebhookId, githubservice, globalScope, log, olog, ostr, printError, printSuccess, removeDeployKey, removeWebhook, retrieveAllDeployKeys, retrieveAllRepositories, retrieveAllWebhooks, userAgent;

  githubservice = {
    name: "githubservice"
  };

  //###########################################################
  //region printLogFunctions
  log = function(arg) {
    if (allModules.debugmodule.modulesToDebug["cloudservicemodule"] != null) {
      console.log("[githubservice]: " + arg);
    }
  };

  ostr = function(o) {
    return JSON.stringify(o, null, 4);
  };

  olog = function(o) {
    return log("\n" + ostr(o));
  };

  printError = function(msg) {
    return console.log(c.red("\n" + msg));
  };

  printSuccess = function(msg) {
    return console.log(c.green("\n" + msg));
  };

  //endregion

    //###########################################################
  //region modulesFromEnvironment
  ({Octokit} = require("@octokit/rest"));

  c = require('chalk');

  //###########################################################
  globalScope = null;

  cfg = null;

  //endregion

  //###########################################################
  baseUrl = "https://api.github.com";

  userAgent = "";

  //###########################################################
  githubservice.initialize = function() {
    log("githubservice.initialize");
    globalScope = allModules.globalscopemodule;
    cfg = allModules.configmodule;
    userAgent = cfg.cli.name + " v" + cfg.cli.version;
  };

  
  //###########################################################
  //region internalFunctions
  getOctokit = function(token) {
    var options;
    log("getOctokit");
    options = {
      auth: token,
      userAgent: userAgent,
      baseUrl: baseUrl
    };
    return Octokit(options);
  };

  checkAccess = async function(token) {
    var err, info, octokit;
    log("checkAccess");
    octokit = getOctokit(token);
    try {
      info = (await octokit.users.getAuthenticated());
      return true;
    } catch (error) {
      err = error;
      return false;
    }
  };

  //###########################################################
  //region retrieveAllFunctions
  retrieveAllRepositories = async function(service) {
    var answer, data, names, octokit, options, repo, results;
    log("retrieveAllRepositories");
    octokit = getOctokit(service.accessToken);
    options = {
      owner: service.username,
      visibility: "all",
      affiliation: "owner",
      sort: "updated",
      per_page: 100,
      direction: "asc",
      page: 0
    };
    results = [];
    while (true) {
      answer = (await octokit.repos.list(options));
      data = answer.data;
      names = (function() {
        var i, len, results1;
        results1 = [];
        for (i = 0, len = data.length; i < len; i++) {
          repo = data[i];
          results1.push(repo.name);
        }
        return results1;
      })();
      options.page++;
      if (names.length) {
        results = results.concat(names);
      } else {
        return results;
      }
    }
  };

  retrieveAllDeployKeys = async function(service, repo) {
    var answer, keys, octokit, options, results;
    log("retrieveAllDeployKeys");
    octokit = getOctokit(service.accessToken);
    options = {
      owner: service.username,
      repo: repo,
      per_page: 100,
      page: 0
    };
    results = [];
    while (true) {
      answer = (await octokit.repos.listDeployKeys(options));
      keys = answer.data;
      // keys =  (key for key in data)
      options.page++;
      if (keys.length) {
        results = results.concat(keys);
      } else {
        return results;
      }
    }
  };

  retrieveAllWebhooks = async function(service, repo) {
    var answer, hooks, octokit, options, results;
    log("retrieveAllWebhooks");
    octokit = getOctokit(service.accessToken);
    options = {
      owner: service.username,
      repo: repo,
      per_page: 100,
      page: 0
    };
    results = [];
    while (true) {
      answer = (await octokit.repos.listHooks(options));
      hooks = answer.data;
      // hooks =  (hook for hook in data)
      options.page++;
      if (hooks.length) {
        results = results.concat(hooks);
      } else {
        return results;
      }
    }
  };

  //endregion

  //###########################################################
  getDeployKeyId = async function(service, repo, title) {
    var allKeys, i, key, len;
    allKeys = (await retrieveAllDeployKeys(service, repo));
// olog allKeys
    for (i = 0, len = allKeys.length; i < len; i++) {
      key = allKeys[i];
      if (title === key.title) {
        return key.id;
      }
    }
    throw new Error("No deployKey found! title: " + title);
  };

  getWebhookId = async function(service, repo, url) {
    var allHooks, hook, i, len;
    allHooks = (await retrieveAllWebhooks(service, repo));
// olog allHooks
    for (i = 0, len = allHooks.length; i < len; i++) {
      hook = allHooks[i];
      if (url === hook.config.url) {
        return hook.id;
      }
    }
    throw new Error("No Webhook found! url: " + url);
  };

  //###########################################################
  //region repoManipulation
  createRepository = async function(service, repo, visible) {
    var octokit, options;
    log("createRepository");
    octokit = getOctokit(service.accessToken);
    options = {
      name: repo,
      private: !visible
    };
    await octokit.repos.createForAuthenticatedUser(options);
  };

  deleteRepository = async function(service, repo) {
    var octokit, options;
    log("deleteRepository");
    octokit = getOctokit(service.accessToken);
    options = {
      repo: repo,
      owner: service.username
    };
    await octokit.repos.delete(options);
  };

  //###########################################################
  addDeployKey = async function(service, repo, key, title) {
    var octokit, options;
    log("addDeployKey");
    octokit = getOctokit(service.accessToken);
    options = {
      repo: repo,
      owner: service.username,
      key: key,
      title: title
    };
    await octokit.repos.addDeployKey(options);
  };

  removeDeployKey = async function(service, repo, title) {
    var keyId, octokit, options;
    log("removeDeployKey");
    octokit = getOctokit(service.accessToken);
    keyId = (await getDeployKeyId(service, repo, title));
    log("keyId: " + keyId);
    options = {
      repo: repo,
      owner: service.username,
      key_id: keyId
    };
    await octokit.repos.removeDeployKey(options);
  };

  
  //###########################################################
  addWebhook = async function(service, repo, url, secret) {
    var config, octokit, options;
    log("addWebhook");
    octokit = getOctokit(service.accessToken);
    config = {
      url: url,
      content_type: "json",
      secret: secret
    };
    options = {
      repo: repo,
      owner: service.username,
      config: config,
      events: ["push"]
    };
    await octokit.repos.createHook(options);
  };

  removeWebhook = async function(service, repo, url) {
    var hookId, octokit, options;
    log("removeWebhook");
    octokit = getOctokit(service.accessToken);
    hookId = (await getWebhookId(service, repo, url));
    log("hookId: " + hookId);
    options = {
      repo: repo,
      owner: service.username,
      hook_id: hookId
    };
    await octokit.repos.deleteHook(options);
  };

  //endregion
  //endregion

  //###########################################################
  //region exposedFunctions
  githubservice.check = async function(service) {
    var scope;
    log("githubservice.check");
    service.isAccessible = (await checkAccess(service.accessToken));
    service.hostURL = baseUrl;
    if (service.isAccessible) {
      scope = (await retrieveAllRepositories(service));
      globalScope.addServiceScope(scope, service);
    }
  };

  //###########################################################
  //region repoManipulations
  githubservice.deleteRepository = async function(service, repo) {
    await deleteRepository(service, repo);
  };

  githubservice.createRepository = async function(service, repo, visible) {
    await createRepository(service, repo, visible);
  };

  //###########################################################
  githubservice.addDeployKey = async function(service, repoName, pubKey, title) {
    await addDeployKey(service, repoName, pubKey, title);
  };

  githubservice.removeDeployKey = async function(service, repoName, title) {
    await removeDeployKey(service, repoName, title);
  };

  //###########################################################
  githubservice.addWebhook = async function(service, repoName, url, secret) {
    await addWebhook(service, repoName, url, secret);
  };

  githubservice.removeWebhook = async function(service, repoName, url) {
    await removeWebhook(service, repoName, url);
  };

  //endregion

  //###########################################################
  githubservice.getSSHURLBase = function(service) {
    log("githubservice.getSSHURLBase");
    return "git@github.com:" + service.username;
  };

  githubservice.getHTTPSURLBase = function(service) {
    log("githubservice.getHTTPSURLBase");
    return "https://github.com/" + service.username;
  };

  //endregion
  module.exports = githubservice;

}).call(this);
