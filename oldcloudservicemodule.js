// Generated by CoffeeScript 2.5.1
(function() {
  var allCloudServiceTypes, allServiceTypes, c, cloudservicemodule, createNewCloudService, createRepository, deleteRepository, getAllServiceChoices, getDefaultThingyCloudService, getHTTPSURLBaseForUnknownService, getSSHURLBaseForUnknownService, getServiceChoice, getServiceChoiceLabel, getServiceChoices, getServiceObjectFromURL, getStringProperties, globalScope, httpsURLBaseForService, log, olog, ostr, serviceFitsURL, sshURLBaseForService, urlHandler, user, userConfig;

  cloudservicemodule = {
    name: "cloudservicemodule"
  };

  //region modulesFromEnvironment
  //region node_modules
  c = require("chalk");

  //endregion

  //region localModules
  user = null;

  urlHandler = null;

  globalScope = null;

  userConfig = null;

  //endregion
  //endregion

  //region serviceTypes
  allCloudServiceTypes = {
    github: {
      defaultHost: "https://api.github.com",
      moduleName: "githubservicemodule"
    },
    gitlab: {
      defaultHost: "https://gitlab.com",
      moduleName: "gitlabservicemodule"
    }
  };

  // bitbucket:
  //     defaultHost: "https://api.bitbucket.org/2.0"
  //     moduleName: "bitbucketservicemodule"
  allServiceTypes = Object.keys(allCloudServiceTypes);

  //endregion

  //region logPrintFunctions
  //#############################################################################
  log = function(arg) {
    if (allModules.debugmodule.modulesToDebug["cloudservicemodule"] != null) {
      console.log("[cloudservicemodule]: " + arg);
    }
  };

  olog = function(o) {
    return log("\n" + ostr(o));
  };

  ostr = function(o) {
    return JSON.stringify(o, null, 4);
  };

  //endregion
  //#############################################################################
  cloudservicemodule.initialize = function() {
    log("cloudservicemodule.initialize");
    globalScope = allModules.globalscopemodule;
    userConfig = allModules.userconfigmodule;
    urlHandler = allModules.urlhandlermodule;
    user = allModules.userinquirermodule;
  };

  //region internalFunctions
  getDefaultThingyCloudService = function(type) {
    var service;
    log("getDefaultThingyCloudService");
    service = {
      accessToken: "",
      username: "",
      hostURL: "",
      type: type,
      isAccessible: false
    };
    if (allCloudServiceTypes[type] != null) {
      service.hostURL = allCloudServiceTypes[type].defaultHost;
    }
    return service;
  };

  createNewCloudService = function(type) {
    var newCloudServiceObject;
    log("createNewCloudService");
    newCloudServiceObject = getDefaultThingyCloudService(type);
    return newCloudServiceObject;
  };

  getStringProperties = function(service) {
    var content, label, properties;
    log("getStringProperties");
    properties = {};
    for (label in service) {
      content = service[label];
      if (label === "type") {
        continue;
      }
      if (typeof content === "string") {
        properties[label] = content;
      }
    }
    return properties;
  };

  createRepository = async function(service, repoName, visible) {
    var module, type;
    log("createRepository");
    type = service.type;
    module = allCloudServiceTypes[type].moduleName;
    await allModules[module].createRepository(service, repoName, visible);
  };

  deleteRepository = async function(service, repoName) {
    var module, type;
    log("deleteRepository");
    type = service.type;
    module = allCloudServiceTypes[type].moduleName;
    await allModules[module].deleteRepository(service, repoName);
  };

  //region urlRelatedFunctions
  getSSHURLBaseForUnknownService = function(service) {
    var serverName;
    log("getSSHURLBaseForUnknownService");
    serverName = urlHandler.getServerName(service.hostURL);
    return "git@" + serverName + ":" + service.username;
  };

  getHTTPSURLBaseForUnknownService = function(service) {
    var serverName;
    log("getHTTPSURLBaseForUnknownService");
    serverName = urlHandler.getServerName(service.hostURL);
    return "https://" + serverName + "/" + service.username;
  };

  sshURLBaseForService = function(service) {
    var module, type;
    log("sshURLBaseForService");
    type = service.type;
    if (allCloudServiceTypes[type] != null) {
      module = allCloudServiceTypes[type].moduleName;
      return allModules[module].getSSHURLBase(service);
    }
    return getSSHURLBaseForUnknownService(service);
  };

  httpsURLBaseForService = function(service) {
    var module, type;
    log("httpsURLBaseForService");
    type = service.type;
    if (allCloudServiceTypes[type] != null) {
      module = allCloudServiceTypes[type].moduleName;
      return allModules[module].getHTTPSURLBase(service);
    }
    return getHTTPSURLBaseForUnknownService(service);
  };

  getServiceObjectFromURL = function(url) {
    var j, len, service, services;
    log("getServiceObjectFromURL");
    services = userConfig.getAllServices();
    for (j = 0, len = services.length; j < len; j++) {
      service = services[j];
      if (serviceFitsURL(service, url)) {
        return service;
      }
    }
    service = getDefaultThingyCloudService("unknown");
    service.hostURL = urlHandler.getHostURL(url);
    service.username = urlHandler.getRessourceScope(url);
    return service;
  };

  serviceFitsURL = function(service, url) {
    var baseURL, hostURL, ressourceScope, serviceBasePath;
    log("serviceFitsURL");
    hostURL = urlHandler.getHostURL(url);
    ressourceScope = urlHandler.getRessourceScope(url);
    baseURL = hostURL + "/" + ressourceScope;
    serviceBasePath = httpsURLBaseForService(service);
    return baseURL === serviceBasePath;
  };

  //endregion

  //region serviceChoiceLabel
  getServiceChoiceLabel = function(service, index) {
    var label;
    log("getServiceChoiceLabel");
    label = "" + index + " " + service.username + " @ " + service.hostURL;
    if (!service.isAccessible) {
      return c.red(label);
    }
    return label;
  };

  getServiceChoice = function(service, index) {
    var choice, label;
    log("getServiceChoice");
    label = getServiceChoiceLabel(service, index);
    choice = {
      name: label,
      value: index
    };
    return choice;
  };

  getServiceChoices = function(services) {
    var i, s;
    log("getServiceChoices");
    return (function() {
      var j, len, results;
      results = [];
      for (i = j = 0, len = services.length; j < len; i = ++j) {
        s = services[i];
        results.push(getServiceChoice(s, i));
      }
      return results;
    })();
  };

  getAllServiceChoices = function() {
    log("getAllServiceChoices");
    return getServiceChoices(userConfig.getAllServices());
  };

  //endregion
  //endregion

  //region exposed
  cloudservicemodule.check = async function(service) {
    var module, type;
    log("cloudservicemodule.checkService");
    type = service.type;
    module = allCloudServiceTypes[type].moduleName;
    await allModules[module].check(service);
  };

  //region interfaceForUserActions
  cloudservicemodule.createConnection = async function() {
    var serviceType, thingyCloudService;
    log("cloudservicemodule.createConnection");
    serviceType = (await user.inquireCloudServiceType());
    if (serviceType === -1) {
      return;
    }
    thingyCloudService = createNewCloudService(serviceType);
    await userConfig.addCloudService(thingyCloudService);
  };

  cloudservicemodule.selectMasterService = async function() {
    var serviceChoice;
    log("cloudservicemodule.selectMasterService");
    serviceChoice = (await user.inquireCloudServiceSelect());
    log(serviceChoice);
    if (serviceChoice === -1) {
      return;
    }
    await userConfig.selectMasterCloudService(serviceChoice);
    globalScope.resetScope();
  };

  cloudservicemodule.editAnyService = async function() {
    var serviceChoice;
    log("cloudservicemodule.editAnyService");
    serviceChoice = (await user.inquireCloudServiceSelect());
    log(serviceChoice);
    if (serviceChoice === -1) {
      return;
    }
    await userConfig.editCloudService(serviceChoice);
  };

  cloudservicemodule.removeAnyService = async function() {
    var service, serviceChoice;
    log("cloudservicemodule.removeAnyService");
    serviceChoice = (await user.inquireCloudServiceSelect());
    log(serviceChoice);
    if (serviceChoice === -1) {
      return;
    }
    service = userConfig.getService(serviceChoice);
    globalScope.removeServiceFromScope(service);
    await userConfig.removeCloudService(serviceChoice);
  };

  //endregion
  cloudservicemodule.serviceAndRepoFromURL = function(url) {
    var repoName, service;
    log("cloudservicemodule.serviceAndRepoFromURL");
    repoName = urlHandler.getRepo(url);
    service = getServiceObjectFromURL(url);
    return {service, repoName};
  };

  cloudservicemodule.createRepository = async function(repo, visible) {
    var service;
    log("cloudservicemodule.createRepository");
    service = userConfig.getMasterService();
    await createRepository(service, repo, visible);
    globalScope.addRepoToServiceScope(repo, service);
  };

  cloudservicemodule.deleteRepository = async function(repo) {
    var service;
    log("cloudservicemodule.deleteRepository");
    while (true) {
      service = globalScope.serviceForRepo(repo);
      await deleteRepository(service, repo);
      globalScope.removeRepoFromServiceScope(repo, service);
      if (!globalScope.repoIsInScope(repo)) {
        return;
      }
    }
  };

  //region exposedInternals
  cloudservicemodule.getSSHBaseForService = function(service) {
    return sshURLBaseForService(service);
  };

  cloudservicemodule.getHTTPSBaseForService = function(service) {
    return httpsURLBaseForService(service);
  };

  cloudservicemodule.getUserAdjustableStringProperties = getStringProperties;

  cloudservicemodule.allServiceTypes = allServiceTypes;

  cloudservicemodule.getAllServiceChoices = getAllServiceChoices;

  //endregion
  //endregion
  module.exports = cloudservicemodule;

}).call(this);
