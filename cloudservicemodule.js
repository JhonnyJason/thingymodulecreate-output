// Generated by CoffeeScript 2.5.1
(function() {
  var addDeployKey, addWebhook, allCloudServiceTypes, allServiceTypes, c, cloudservicemodule, createNewCloudService, createRepository, deleteRepository, getAllServiceChoices, getDefaultThingyCloudService, getHTTPSURLBaseForUnknownService, getSSHURLBaseForUnknownService, getServiceChoice, getServiceChoiceLabel, getServiceChoices, getServiceObjectFromURL, getStringProperties, globalScope, httpsURLBaseForService, log, olog, ostr, removeDeployKey, removeWebhook, serviceFitsURL, serviceModule, sshURLBaseForService, urlHandler, user, userConfig;

  cloudservicemodule = {
    name: "cloudservicemodule"
  };

  //###########################################################
  //region logPrintFunctions
  log = function(arg) {
    if (allModules.debugmodule.modulesToDebug["cloudservicemodule"] != null) {
      console.log("[cloudservicemodule]: " + arg);
    }
  };

  olog = function(o) {
    return log("\n" + ostr(o));
  };

  ostr = function(o) {
    return JSON.stringify(o, null, 4);
  };

  //endregion

  //###########################################################
  //region modulesFromEnvironment
  c = require("chalk");

  //###########################################################
  //region localModules
  user = null;

  urlHandler = null;

  globalScope = null;

  userConfig = null;

  //endregion
  //endregion

  //###########################################################
  //region serviceTypes
  allCloudServiceTypes = {
    github: {
      defaultHost: "https://api.github.com",
      module: require("./githubservice")
    },
    gitlab: {
      defaultHost: "https://gitlab.com",
      module: require("./gitlabservice")
    }
  };

  // bitbucket:
  //     defaultHost: "https://api.bitbucket.org/2.0"
  //     module: require "bitbucketservice"
  allServiceTypes = Object.keys(allCloudServiceTypes);

  //endregion

  //###########################################################
  cloudservicemodule.initialize = async function() {
    var m, n;
    log("cloudservicemodule.initialize");
    globalScope = allModules.globalscopemodule;
    userConfig = allModules.userconfigmodule;
    urlHandler = allModules.urlhandlermodule;
    user = allModules.userinquirermodule;
    for (n in allCloudServiceTypes) {
      m = allCloudServiceTypes[n];
      await m.module.initialize();
    }
  };

  //###########################################################
  //region internalFunctions
  getDefaultThingyCloudService = function(type) {
    var service;
    log("getDefaultThingyCloudService");
    service = {
      accessToken: "",
      username: "",
      hostURL: "",
      type: type,
      isAccessible: false
    };
    if (allCloudServiceTypes[type] != null) {
      service.hostURL = allCloudServiceTypes[type].defaultHost;
    }
    return service;
  };

  createNewCloudService = function(type) {
    var newCloudServiceObject;
    log("createNewCloudService");
    newCloudServiceObject = getDefaultThingyCloudService(type);
    return newCloudServiceObject;
  };

  getStringProperties = function(service) {
    var content, label, properties;
    log("getStringProperties");
    properties = {};
    for (label in service) {
      content = service[label];
      if (label === "type") {
        continue;
      }
      if (typeof content === "string") {
        properties[label] = content;
      }
    }
    return properties;
  };

  //###########################################################
  serviceModule = function(service) {
    var type;
    type = service.type;
    return allCloudServiceTypes[type].module;
  };

  
  //###########################################################
  //region callsToServiceModule
  //###########################################################
  createRepository = async function(service, repoName, visible) {
    var m;
    log("createRepository");
    m = serviceModule(service);
    await m.createRepository(service, repoName, visible);
  };

  deleteRepository = async function(service, repoName) {
    var m;
    log("deleteRepository");
    m = serviceModule(service);
    await m.deleteRepository(service, repoName);
  };

  //###########################################################
  addDeployKey = async function(service, repoName, pubKey, title) {
    var m;
    log("addDeployKey");
    m = serviceModule(service);
    await m.addDeployKey(service, repoName, pubKey, title);
  };

  removeDeployKey = async function(service, repoName, title) {
    var m;
    log("removeDeployKey");
    m = serviceModule(service);
    await m.removeDeployKey(service, repoName, title);
  };

  //###########################################################
  addWebhook = async function(service, repoName, url, secret) {
    var m;
    log("addWebhook");
    m = serviceModule(service);
    await m.addWebhook(service, repoName, url, secret);
  };

  removeWebhook = async function(service, repoName, url) {
    var m;
    log("removeWebhook");
    m = serviceModule(service);
    await m.removeWebhook(service, repoName, url);
  };

  //endregion

  //###########################################################
  //region urlRelatedFunctions
  getSSHURLBaseForUnknownService = function(service) {
    var serverName;
    log("getSSHURLBaseForUnknownService");
    serverName = urlHandler.getServerName(service.hostURL);
    return "git@" + serverName + ":" + service.username;
  };

  getHTTPSURLBaseForUnknownService = function(service) {
    var serverName;
    log("getHTTPSURLBaseForUnknownService");
    serverName = urlHandler.getServerName(service.hostURL);
    return "https://" + serverName + "/" + service.username;
  };

  sshURLBaseForService = function(service) {
    var module, type;
    log("sshURLBaseForService");
    type = service.type;
    if (allCloudServiceTypes[type] != null) {
      module = allCloudServiceTypes[type].module;
      return module.getSSHURLBase(service);
    }
    return getSSHURLBaseForUnknownService(service);
  };

  httpsURLBaseForService = function(service) {
    var module, type;
    log("httpsURLBaseForService");
    type = service.type;
    if (allCloudServiceTypes[type] != null) {
      module = allCloudServiceTypes[type].module;
      return module.getHTTPSURLBase(service);
    }
    return getHTTPSURLBaseForUnknownService(service);
  };

  getServiceObjectFromURL = function(url) {
    var j, len, service, services;
    log("getServiceObjectFromURL");
    services = userConfig.getAllServices();
    for (j = 0, len = services.length; j < len; j++) {
      service = services[j];
      if (serviceFitsURL(service, url)) {
        return service;
      }
    }
    service = getDefaultThingyCloudService("unknown");
    service.hostURL = urlHandler.getHostURL(url);
    service.username = urlHandler.getRessourceScope(url);
    return service;
  };

  serviceFitsURL = function(service, url) {
    var baseURL, hostURL, ressourceScope, serviceBasePath;
    log("serviceFitsURL");
    hostURL = urlHandler.getHostURL(url);
    ressourceScope = urlHandler.getRessourceScope(url);
    baseURL = hostURL + "/" + ressourceScope;
    serviceBasePath = httpsURLBaseForService(service);
    return baseURL === serviceBasePath;
  };

  //endregion

  //###########################################################
  //region serviceChoiceLabel
  getServiceChoiceLabel = function(service, index) {
    var label;
    log("getServiceChoiceLabel");
    label = "" + index + " " + service.username + " @ " + service.hostURL;
    if (!service.isAccessible) {
      return c.red(label);
    }
    return label;
  };

  getServiceChoice = function(service, index) {
    var choice, label;
    log("getServiceChoice");
    label = getServiceChoiceLabel(service, index);
    choice = {
      name: label,
      value: index
    };
    return choice;
  };

  getServiceChoices = function(services) {
    var i, s;
    log("getServiceChoices");
    return (function() {
      var j, len, results;
      results = [];
      for (i = j = 0, len = services.length; j < len; i = ++j) {
        s = services[i];
        results.push(getServiceChoice(s, i));
      }
      return results;
    })();
  };

  getAllServiceChoices = function() {
    log("getAllServiceChoices");
    return getServiceChoices(userConfig.getAllServices());
  };

  //endregion
  //endregion

  //###########################################################
  //region exposed
  cloudservicemodule.check = async function(service) {
    var m;
    log("cloudservicemodule.checkService");
    m = serviceModule(service);
    await m.check(service);
  };

  //###########################################################
  //region interfaceForUserActions
  cloudservicemodule.createConnection = async function() {
    var serviceType, thingyCloudService;
    log("cloudservicemodule.createConnection");
    serviceType = (await user.inquireCloudServiceType());
    if (serviceType === -1) {
      return;
    }
    thingyCloudService = createNewCloudService(serviceType);
    await userConfig.addCloudService(thingyCloudService);
  };

  cloudservicemodule.selectMasterService = async function() {
    var serviceChoice;
    log("cloudservicemodule.selectMasterService");
    serviceChoice = (await user.inquireCloudServiceSelect());
    log(serviceChoice);
    if (serviceChoice === -1) {
      return;
    }
    await userConfig.selectMasterCloudService(serviceChoice);
    globalScope.resetScope();
  };

  cloudservicemodule.editAnyService = async function() {
    var serviceChoice;
    log("cloudservicemodule.editAnyService");
    serviceChoice = (await user.inquireCloudServiceSelect());
    log(serviceChoice);
    if (serviceChoice === -1) {
      return;
    }
    await userConfig.editCloudService(serviceChoice);
  };

  cloudservicemodule.removeAnyService = async function() {
    var service, serviceChoice;
    log("cloudservicemodule.removeAnyService");
    serviceChoice = (await user.inquireCloudServiceSelect());
    log(serviceChoice);
    if (serviceChoice === -1) {
      return;
    }
    service = userConfig.getService(serviceChoice);
    globalScope.removeServiceFromScope(service);
    await userConfig.removeCloudService(serviceChoice);
  };

  //endregion
  cloudservicemodule.serviceAndRepoFromURL = function(url) {
    var repoName, service;
    log("cloudservicemodule.serviceAndRepoFromURL");
    repoName = urlHandler.getRepo(url);
    service = getServiceObjectFromURL(url);
    return {service, repoName};
  };

  //###########################################################
  cloudservicemodule.createRepository = async function(repo, visible) {
    var service;
    log("cloudservicemodule.createRepository");
    service = userConfig.getMasterService();
    await createRepository(service, repo, visible);
    globalScope.addRepoToServiceScope(repo, service);
  };

  cloudservicemodule.deleteRepository = async function(repo) {
    var service;
    log("cloudservicemodule.deleteRepository");
    while (true) {
      service = globalScope.serviceForRepo(repo);
      if (!service) {
        return;
      }
      await deleteRepository(service, repo);
      globalScope.removeRepoFromServiceScope(repo, service);
    }
  };

  //###########################################################
  cloudservicemodule.addDeployKey = async function(repoName, pubKey, title) {
    var service;
    log("cloudservicemodule.addDeployKey");
    service = globalScope.serviceForRepo(repoName);
    if (!service) {
      return;
    }
    await addDeployKey(service, repoName, pubKey, title);
  };

  cloudservicemodule.removeDeployKey = async function(repoName, title) {
    var service;
    log("cloudservicemodule.removeDeployKey");
    service = globalScope.serviceForRepo(repoName);
    if (!service) {
      return;
    }
    await removeDeployKey(service, repoName, title);
  };

  cloudservicemodule.addWebhook = async function(repoName, url, secret) {
    var service;
    log("cloudservicemodule.addWebhook");
    service = globalScope.serviceForRepo(repoName);
    if (!service) {
      return;
    }
    await addWebhook(service, repoName, url, secret);
  };

  cloudservicemodule.removeWebhook = async function(repoName, url) {
    var service;
    log("cloudservicemodule.removeWebhook");
    service = globalScope.serviceForRepo(repoName);
    if (!service) {
      return;
    }
    await removeWebhook(service, repoName, url);
  };

  //###########################################################
  //region exposedInternals
  cloudservicemodule.getSSHBaseForService = function(service) {
    return sshURLBaseForService(service);
  };

  cloudservicemodule.getHTTPSBaseForService = function(service) {
    return httpsURLBaseForService(service);
  };

  cloudservicemodule.getUserAdjustableStringProperties = getStringProperties;

  cloudservicemodule.allServiceTypes = allServiceTypes;

  cloudservicemodule.getAllServiceChoices = getAllServiceChoices;

  //endregion
  //endregion
  module.exports = cloudservicemodule;

}).call(this);
